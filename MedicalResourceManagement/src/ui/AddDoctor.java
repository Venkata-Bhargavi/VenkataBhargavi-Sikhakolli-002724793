/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import medicalresourcemanagement.City;
import medicalresourcemanagement.CityDirectory;
import medicalresourcemanagement.Community;
import medicalresourcemanagement.CommunityDirectory;
import medicalresourcemanagement.Doctor;
import medicalresourcemanagement.DoctorDirectory;
import medicalresourcemanagement.EncounterHistory;
import medicalresourcemanagement.Hospital;
import medicalresourcemanagement.HospitalDirectory;
import medicalresourcemanagement.House;
import medicalresourcemanagement.PatientDirectory;
//import medicalresourcemanagement.Patient;

/**
 *
 * @author bhargavi
 */
public class AddDoctor extends javax.swing.JPanel {

    public String checkError;
    DoctorDirectory doctorHistory;
    
    CommunityDirectory communityHistory;
    CityDirectory cityHistory;
    
    City chosenCity;
    Community chosenComm;
    House house;
    
    Hospital hospital;
//    HospitalDirectory hospitalHistory;
    
    PatientDirectory patientHistory;
    
    EncounterHistory encounterHistory;

    
    JPanel workArea;
    

    /**
     * Creates new form AddDoctor
     */
    public AddDoctor(JPanel workArea,PatientDirectory patientHistory, DoctorDirectory doctorHistory,EncounterHistory encounterHistory, CityDirectory cityHistory, CommunityDirectory communityHistory) {
        initComponents();
        this.doctorHistory = doctorHistory;
        this.communityHistory = communityHistory;
        this.cityHistory = cityHistory;
        this.patientHistory = patientHistory;
//        this.hospitalHistory = hospitalHistory;
        this.encounterHistory = encounterHistory;
        lblCityVal.setText("Select a City.");
        lblCommval1.setText("Select a Community.");
        this.workArea = workArea;
        
        
        populatecity();
        populatecityInManageDoctor();
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelManageDoctor = new javax.swing.JPanel();
        spperson = new javax.swing.JScrollPane();
        tblperson = new javax.swing.JTable();
        lbltitle = new javax.swing.JLabel();
        lblcommunity2 = new javax.swing.JLabel();
        lblhouseaddress2 = new javax.swing.JLabel();
        lblcity2 = new javax.swing.JLabel();
        lblusername2 = new javax.swing.JLabel();
        lblpassword2 = new javax.swing.JLabel();
        txtusername2 = new javax.swing.JTextField();
        txtpassword2 = new javax.swing.JTextField();
        cbcommunity2 = new javax.swing.JComboBox<>();
        btnupdate = new javax.swing.JButton();
        btnViewAndUpdate = new javax.swing.JButton();
        btndelete = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        cbCity = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtDoctorName1 = new javax.swing.JTextField();
        cbHospitalName1 = new javax.swing.JComboBox<>();
        lblErrorPassword = new javax.swing.JLabel();
        lblCommval = new javax.swing.JPanel();
        lblcommunity1 = new javax.swing.JLabel();
        lblhouseaddress1 = new javax.swing.JLabel();
        lblcity1 = new javax.swing.JLabel();
        lblusername1 = new javax.swing.JLabel();
        lblpassword1 = new javax.swing.JLabel();
        txtun = new javax.swing.JTextField();
        txtpassword1 = new javax.swing.JTextField();
        cbCommunity1 = new javax.swing.JComboBox<>();
        btnadd1 = new javax.swing.JButton();
        lblAddTitle1 = new javax.swing.JLabel();
        lblErrorHouseAddress1 = new javax.swing.JLabel();
        lblErrorUserName1 = new javax.swing.JLabel();
        lblErrorPassword1 = new javax.swing.JLabel();
        cbCity1 = new javax.swing.JComboBox<>();
        txtDoctorName = new javax.swing.JLabel();
        lblDoctorName = new javax.swing.JTextField();
        lblCityVal = new javax.swing.JLabel();
        lblCommval1 = new javax.swing.JLabel();
        cbHospitalName = new javax.swing.JComboBox<>();
        lblerrorun = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1400, 1000));

        jTabbedPane1.setBackground(new java.awt.Color(204, 204, 204));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(900, 700));

        jPanelManageDoctor.setBackground(new java.awt.Color(204, 204, 255));
        jPanelManageDoctor.setPreferredSize(new java.awt.Dimension(900, 700));

        spperson.setPreferredSize(new java.awt.Dimension(900, 100));

        tblperson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Doctor Id", "City", "Community", "Hospital Name", "Doctor Name", "Username", "Password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblperson.setPreferredSize(new java.awt.Dimension(900, 80));
        spperson.setViewportView(tblperson);

        lbltitle.setFont(new java.awt.Font("Helvetica Neue", 3, 18)); // NOI18N
        lbltitle.setText("Manage Doctor");

        lblcommunity2.setText("Community :");

        lblhouseaddress2.setText("Hospital Name:");

        lblcity2.setText("City :");

        lblusername2.setText("User Name :");

        lblpassword2.setText("Password :");

        txtpassword2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpassword2KeyReleased(evt);
            }
        });

        cbcommunity2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbcommunity2ActionPerformed(evt);
            }
        });

        btnupdate.setText("Update");
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });

        btnViewAndUpdate.setText("View & Update");
        btnViewAndUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAndUpdateActionPerformed(evt);
            }
        });

        btndelete.setText("Delete");
        btndelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by Id");

        jLabel2.setText("Search by Name");

        cbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCityActionPerformed(evt);
            }
        });

        jLabel3.setText("Doctor Name:");

        txtDoctorName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorName1ActionPerformed(evt);
            }
        });

        lblErrorPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblErrorPasswordKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanelManageDoctorLayout = new javax.swing.GroupLayout(jPanelManageDoctor);
        jPanelManageDoctor.setLayout(jPanelManageDoctorLayout);
        jPanelManageDoctorLayout.setHorizontalGroup(
            jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(26, 26, 26)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(134, 134, 134))
            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelManageDoctorLayout.createSequentialGroup()
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(spperson, javax.swing.GroupLayout.PREFERRED_SIZE, 989, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                .addGap(416, 416, 416)
                                .addComponent(lbltitle))
                            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                .addGap(192, 192, 192)
                                .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblcity2)
                                    .addComponent(lblcommunity2))))
                        .addGap(0, 186, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelManageDoctorLayout.createSequentialGroup()
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblhouseaddress2)
                            .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                    .addGap(190, 190, 190)
                                    .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblpassword2)
                                        .addComponent(lblusername2)))
                                .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                    .addGap(183, 183, 183)
                                    .addComponent(jLabel3))))
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblErrorPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                        .addGap(522, 522, 522)
                                        .addComponent(btnViewAndUpdate)
                                        .addGap(18, 18, 18)
                                        .addComponent(btndelete))
                                    .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                                        .addGap(73, 73, 73)
                                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(cbHospitalName1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDoctorName1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbcommunity2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtusername2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtpassword2, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(24, 24, 24))
            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                .addGap(350, 350, 350)
                .addComponent(btnupdate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelManageDoctorLayout.setVerticalGroup(
            jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lbltitle)
                .addGap(63, 63, 63)
                .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(spperson, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnViewAndUpdate)
                            .addComponent(btndelete)))
                    .addGroup(jPanelManageDoctorLayout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblcity2)
                            .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbcommunity2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblcommunity2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblhouseaddress2)
                            .addComponent(cbHospitalName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDoctorName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblErrorPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblusername2)
                                .addComponent(txtusername2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelManageDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblpassword2)
                    .addComponent(txtpassword2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addComponent(btnupdate)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Manage Doctor", jPanelManageDoctor);

        lblCommval.setBackground(new java.awt.Color(204, 204, 255));
        lblCommval.setPreferredSize(new java.awt.Dimension(900, 700));

        lblcommunity1.setText("Community :");

        lblhouseaddress1.setText("Hospital Name:");

        lblcity1.setText("City :");

        lblusername1.setText("User Name :");

        lblpassword1.setText("Password :");

        txtun.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtunKeyReleased(evt);
            }
        });

        txtpassword1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtpassword1KeyReleased(evt);
            }
        });

        cbCommunity1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCommunity1ActionPerformed(evt);
            }
        });

        btnadd1.setText("Add");
        btnadd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadd1ActionPerformed(evt);
            }
        });

        lblAddTitle1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        lblAddTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddTitle1.setText("Add Doctor");
        lblAddTitle1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblErrorHouseAddress1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblErrorHouseAddress1KeyReleased(evt);
            }
        });

        lblErrorUserName1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblErrorUserName1KeyReleased(evt);
            }
        });

        lblErrorPassword1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lblErrorPassword1KeyReleased(evt);
            }
        });

        cbCity1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCity1ActionPerformed(evt);
            }
        });

        txtDoctorName.setText("Doctor Name:");

        javax.swing.GroupLayout lblCommvalLayout = new javax.swing.GroupLayout(lblCommval);
        lblCommval.setLayout(lblCommvalLayout);
        lblCommvalLayout.setHorizontalGroup(
            lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblCommvalLayout.createSequentialGroup()
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(lblCommvalLayout.createSequentialGroup()
                            .addGap(201, 201, 201)
                            .addComponent(txtDoctorName))
                        .addComponent(lblhouseaddress1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblcommunity1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblcity1, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblusername1)
                            .addComponent(lblpassword1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbCommunity1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbCity1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbHospitalName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblDoctorName))
                    .addComponent(txtpassword1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                    .addComponent(txtun, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lblerrorun, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblErrorUserName1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblErrorHouseAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCityVal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblCommval1, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)))
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lblErrorPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(144, 144, 144))
            .addGroup(lblCommvalLayout.createSequentialGroup()
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(lblAddTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(btnadd1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblCommvalLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbCommunity1, txtpassword1, txtun});

        lblCommvalLayout.setVerticalGroup(
            lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblCommvalLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(lblAddTitle1)
                .addGap(169, 169, 169)
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblcity1)
                    .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbCity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCityVal, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(lblErrorHouseAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbCommunity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblcommunity1)
                            .addComponent(lblCommval1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblhouseaddress1)
                            .addComponent(cbHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(33, 33, 33)
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDoctorName)
                    .addComponent(lblDoctorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(lblCommvalLayout.createSequentialGroup()
                        .addComponent(lblErrorUserName1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblusername1)
                        .addComponent(lblerrorun, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29)
                .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lblCommvalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblpassword1)
                        .addComponent(txtpassword1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblErrorPassword1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(btnadd1)
                .addGap(110, 110, 110))
        );

        jTabbedPane1.addTab("Add Doctor", lblCommval);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1205, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btndeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblperson.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a entry to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel)tblperson.getModel();
        Doctor selectedEntry = doctorHistory.getDoctorHistory().get(selectedRowIndex);
        doctorHistory.deleteDoctor(selectedEntry);

        JOptionPane.showMessageDialog(this, "Selected Employee Deleted");
        populateDataToTable(); //  deletes record from table and updates all entries
    }//GEN-LAST:event_btndeleteActionPerformed

    private void btnViewAndUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAndUpdateActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblperson.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a entry to view");
            return;
        }

        cbCity.setSelectedItem(doctorHistory.getDoctorHistory().get(selectedRowIndex).getCity());
        cbcommunity2.setSelectedItem(doctorHistory.getDoctorHistory().get(selectedRowIndex).getCommunity());
        cbHospitalName1.setSelectedItem(doctorHistory.getDoctorHistory().get(selectedRowIndex).getHospitalName());       
        txtDoctorName1.setText(doctorHistory.getDoctorHistory().get(selectedRowIndex).getDoctorName());
        txtusername2.setText(doctorHistory.getDoctorHistory().get(selectedRowIndex).getUserName());
        txtpassword2.setText(doctorHistory.getDoctorHistory().get(selectedRowIndex).getPassword());
    }//GEN-LAST:event_btnViewAndUpdateActionPerformed

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblperson.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a Record to update the employee details");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblperson.getModel();
        Doctor selectedEntry = doctorHistory.getDoctorHistory().get(selectedRowIndex);

        //Patient selectedEntry = (Patient) model.getValueAt(selectedRowIndex, 1);
        //        selectedEntry.setEmployeeId(txtEmployeeId.getText());
        
//        selectedEntry.setHouseAddress(txtHospitalName.getText());
        selectedEntry.setCity(cbCity.getSelectedItem().toString());
        selectedEntry.setCommunity(cbcommunity2.getSelectedItem().toString());
        selectedEntry.setHospitalName(cbHospitalName1.getSelectedItem().toString());

        selectedEntry.setDoctorName(txtDoctorName1.getText());

        selectedEntry.setUserName(txtusername2.getText());
        selectedEntry.setPassword(txtpassword2.getText());

        populateDataToTable();

        //once deleted all the fiels in view model will be deleted
        
//        txtHospitalName.setText("");
//        txtcity1.setText("");
        cbcommunity2.setSelectedItem(-1);
        cbHospitalName1.setSelectedItem(-1);
        cbCity.setSelectedItem(-1);
        txtDoctorName1.setText("");
        txtusername2.setText("");
        txtpassword2.setText("");
    }//GEN-LAST:event_btnupdateActionPerformed

    private void lblErrorPassword1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblErrorPassword1KeyReleased
        // TODO add your handling code here:
        
        
        
    }//GEN-LAST:event_lblErrorPassword1KeyReleased

    private void lblErrorUserName1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblErrorUserName1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lblErrorUserName1KeyReleased

    private void lblErrorHouseAddress1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblErrorHouseAddress1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_lblErrorHouseAddress1KeyReleased

    private void btnadd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadd1ActionPerformed
        // TODO add your handling code here:
        if(checkError != null /*|| (txtname.getText() == null  || txtphone.getText() == null || txthouseaddress.getText() == null || txtcity.getText() ==null || txtusername.getText() == null ||txtpassword.getText() == null)*/){
            JOptionPane.showMessageDialog(this,"Please provide valid inputs to all fields");

        }
        else{
                            
             
            String city = cbCity1.getSelectedItem().toString();
            String community = cbCommunity1.getSelectedItem().toString();
            String hospitalName = cbHospitalName.getSelectedItem().toString();
            String DoctorName = lblDoctorName.getText();
            String userName = txtun.getText();
            String password = txtpassword1.getText();
                        
            Doctor doc = doctorHistory.addNewDoctor(); //
//
//            // sets value to ArrayList from the fields that the data is entered.
//
              doc.setCity(city);
              doc.setCommunity(community);
              doc.setHospitalName(hospitalName);
              doc.setDoctorName(DoctorName);
              doc.setUserName(userName);
              doc.setPassword(password);


            // shows a dialogue message when the data clicked save button
            JOptionPane.showMessageDialog(this,"Saved");

            // empties all the fields after saving the entered data to ArrayList to facilitate new entries.
          
            cbCity1.setSelectedIndex(-1);
            cbCommunity1.setSelectedIndex(-1);
            cbHospitalName.setSelectedIndex(-1);
            lblDoctorName.setText("");
            txtun.setText("");
            txtpassword1.setText("");

            populateDataToTable();

        }
    }//GEN-LAST:event_btnadd1ActionPerformed

    private void cbCommunity1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCommunity1ActionPerformed
        // TODO add your handling code here:
        if(cbCommunity1.getSelectedIndex() != (-1)){
            lblCommval1.setText("");
        }
        else{
            lblCommval1.setText("Select a City.");

        }
        
       
        
       
        for(Community x: this.communityHistory.getCommunitylist()){
            if(x.getCommunityName().equals(cbCommunity1.getSelectedItem())){
                chosenComm=x;
            }
        }
//        lblCityVal.setText("");
        populateHospitals(); 
        
    }//GEN-LAST:event_cbCommunity1ActionPerformed

    private void txtpassword1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpassword1KeyReleased
        // TODO add your handling code here:
        String PATTERN = "^(?=.*[0-9])"
        + "(?=.*[a-z])(?=.*[A-Z])"
        + "(?=.*[@#$%^&+=])"
        + "(?=\\S+$).{8,20}$"; // regex that matches the input
        Pattern pattern = Pattern.compile(PATTERN);
        Matcher match = pattern.matcher(txtpassword1.getText()); // gets text from field and matched against the regex

        if(!match.matches())
        {
            checkError = "error";
            lblErrorPassword1.setText("Make sure the password has atleast one number , a capital letter and a special character"); //throws message if input other than text is entered
        }
        else
        {
            checkError = null;
            lblErrorPassword1.setText(null);
        }
    }//GEN-LAST:event_txtpassword1KeyReleased

    private void cbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCityActionPerformed
        // TODO add your handling code here:
        if(cbCity1.getSelectedIndex() != (-1)){
            lblCityVal.setText("");            
        }
        else{
            lblCityVal.setText("Select a City.");
        }
        
        //        this.chosenCity = (City) citydropdown.getSelectedItem();
//        JOptionPane.showMessageDialog(this, citydropdown.getSelectedItem());

        for(City x: this.cityHistory.getCitylist()){
            if(x.getCityName().equals(cbCity1.getSelectedItem())){
                chosenCity=x;
            }
        }
//        lblCityVal.setText("");
        populatecommunitiesInManageDoctor(); 
        
    }//GEN-LAST:event_cbCityActionPerformed

    private void cbCity1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCity1ActionPerformed
        // TODO add your handling code here:
        
        if(cbCity1.getSelectedIndex() != (-1)){
            lblCityVal.setText("");            
        }
        else{
            lblCityVal.setText("Select a City.");
        }
        
        //        this.chosenCity = (City) citydropdown.getSelectedItem();
//        JOptionPane.showMessageDialog(this, citydropdown.getSelectedItem());

        for(City x: this.cityHistory.getCitylist()){
            if(x.getCityName().equals(cbCity1.getSelectedItem())){
                chosenCity=x;
            }
        }
//        lblCityVal.setText("");
        populatecommunities(); 
    }//GEN-LAST:event_cbCity1ActionPerformed

    private void txtDoctorName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorName1ActionPerformed

    private void lblErrorPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblErrorPasswordKeyReleased
        // TODO add your handling code here:
        
        
        // TODO add your handling code here:
         
    }//GEN-LAST:event_lblErrorPasswordKeyReleased

    private void txtpassword2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtpassword2KeyReleased
        // TODO add your handling code here:
        
        
         String PATTERN = "^(?=.*[0-9])"
                       + "(?=.*[a-z])(?=.*[A-Z])"
                       + "(?=.*[@#$%^&+=])"
                       + "(?=\\S+$).{8,20}$"; // regex that matches the input
        Pattern pattern = Pattern.compile(PATTERN);
        Matcher match = pattern.matcher(txtpassword2.getText()); // gets text from field and matched against the regex
     
        if(!match.matches())
        {
            checkError = "error";
            lblErrorPassword.setText("password should have atleast one number,a capital letter and a special character"); //throws message if input other than text is entered
        }
        else
        {
            checkError = null;
            lblErrorPassword.setText(null);
        }
    }//GEN-LAST:event_txtpassword2KeyReleased

    private void txtunKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtunKeyReleased
        // TODO add your handling code here:
        
//        for(Doctor d : this.doctorHistory.getDoctorHistory()){
//            if(d.getUserName() == txtun.getText()){
//            checkError = "error";
//            lblerrorun.setText("User name exists");
//            }
//            else{
//            checkError = null;
//            }
//        
//    }
        
        
        String PatterN = "^[a-zA-Z0-9 '/:]+$";
        Pattern pattern = Pattern.compile(PatterN);
        Matcher patternmatch = pattern.matcher(txtun.getText());
        if(!patternmatch.matches() )
        {
            lblerrorun.setText("Enter valid input.");
                        checkError = "error";

        }
        else
        {
            lblerrorun.setText("");
            checkError = null;
        }
        boolean isExist = doctorHistory.isUserNameExist(txtun.getText());
        if(isExist){
            lblerrorun.setText("UserName Already Taken.");
                                    checkError = "error";

        }
        else{
            lblerrorun.setText("");
            checkError = null;
        }
        
        
        
    }//GEN-LAST:event_txtunKeyReleased

    private void cbcommunity2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbcommunity2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbcommunity2ActionPerformed

    
    public void populatecommunities() {
      
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        for(Community com: this.chosenCity.getCommunitylist()) {
            model.addElement(com.getCommunityName());
        }
        
        cbCommunity1.setModel(model);
//        commdropdown.setSelectedIndex(-1);

    }
    
    public void populateHospitals() {
      
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        for(Hospital com: this.chosenComm.getHospitallist()) {
            model.addElement(com.getHospitalName());
        }
        
        cbHospitalName.setModel(model);
        cbHospitalName1.setModel(model);
//        commdropdown.setSelectedIndex(-1);

    }
    public void populatecommunitiesInManageDoctor() {
      
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        for(Community com: this.chosenCity.getCommunitylist()) {
            model.addElement(com.getCommunityName());
        }
        
        cbcommunity2.setModel(model);
//        commdropdown.setSelectedIndex(-1);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnViewAndUpdate;
    private javax.swing.JButton btnadd1;
    private javax.swing.JButton btndelete;
    private javax.swing.JButton btnupdate;
    private javax.swing.JComboBox<String> cbCity;
    private javax.swing.JComboBox<String> cbCity1;
    private javax.swing.JComboBox<String> cbCommunity1;
    private javax.swing.JComboBox<String> cbHospitalName;
    private javax.swing.JComboBox<String> cbHospitalName1;
    private javax.swing.JComboBox<String> cbcommunity2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanelManageDoctor;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblAddTitle1;
    private javax.swing.JLabel lblCityVal;
    private javax.swing.JPanel lblCommval;
    private javax.swing.JLabel lblCommval1;
    private javax.swing.JTextField lblDoctorName;
    private javax.swing.JLabel lblErrorHouseAddress1;
    private javax.swing.JLabel lblErrorPassword;
    private javax.swing.JLabel lblErrorPassword1;
    private javax.swing.JLabel lblErrorUserName1;
    private javax.swing.JLabel lblcity1;
    private javax.swing.JLabel lblcity2;
    private javax.swing.JLabel lblcommunity1;
    private javax.swing.JLabel lblcommunity2;
    private javax.swing.JLabel lblerrorun;
    private javax.swing.JLabel lblhouseaddress1;
    private javax.swing.JLabel lblhouseaddress2;
    private javax.swing.JLabel lblpassword1;
    private javax.swing.JLabel lblpassword2;
    private javax.swing.JLabel lbltitle;
    private javax.swing.JLabel lblusername1;
    private javax.swing.JLabel lblusername2;
    private javax.swing.JScrollPane spperson;
    private javax.swing.JTable tblperson;
    private javax.swing.JLabel txtDoctorName;
    private javax.swing.JTextField txtDoctorName1;
    private javax.swing.JTextField txtpassword1;
    private javax.swing.JTextField txtpassword2;
    private javax.swing.JTextField txtun;
    private javax.swing.JTextField txtusername2;
    // End of variables declaration//GEN-END:variables


    
    public void populatecity() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        for(City c: this.cityHistory.getCitylist()) {
            model.addElement(c.getCityName());
        }
        
        cbCity1.setModel(model);
    }
    
    public void populatecityInManageDoctor() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        for(City c: this.cityHistory.getCitylist()) {
            model.addElement(c.getCityName());
        }
        
        cbCity.setModel(model);
    }
    
    private void populateDataToTable() {
        //TableModel is used to manipulate table content.
        // type casts tablemodel to defaultTableModel.
    DefaultTableModel model = (DefaultTableModel) tblperson.getModel();
    model.setRowCount(0); // deleting empty records
    
    // looping over profileHistory of employees.
    // getProfileHistory returns the history of employee records.
    for (Doctor d : doctorHistory.getDoctorHistory()){
        
        // row is array of objects with 9 menbers. (1 for each column)
        Object[] row =  new Object[9];
        row[0] = d.getDoctorId()/*.getPatientId()*/;/*.getEmployeeId()*/
        row[1] = d.getCity();
        row[2] = d.getCommunity();
        row[3] = d.getHospitalName();
        row[4] = d.getDoctorName();
        row[5] = d.getUserName();
        
        row[6] = d.getPassword();
                
        

        model.addRow(row); // adds row to model

    }
    }
}
