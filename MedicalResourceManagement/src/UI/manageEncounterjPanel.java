/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import medicalresourcemanagement.Community;
import medicalresourcemanagement.CommunityDirectory;
import medicalresourcemanagement.Doctor;
import medicalresourcemanagement.DoctorDirectory;
import medicalresourcemanagement.Encounter;
import medicalresourcemanagement.EncounterHistory;
import medicalresourcemanagement.Hospital;
import medicalresourcemanagement.Patient;
import medicalresourcemanagement.PatientDirectory;
import medicalresourcemanagement.Person;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Krishnakanth Naik Jarapala
 */
public class manageEncounterjPanel extends javax.swing.JPanel {

    /**
     * Creates new form manageEncounterjPanel
     */
    
    PatientDirectory patientlist;
    DoctorDirectory doctorlist;
    CommunityDirectory communitylist;
    Community patComm;
    
    Patient selectedPat;
    Encounter selectedEnc;
    
   
    
    
    
    public manageEncounterjPanel(PatientDirectory patientlist, CommunityDirectory communitylist, DoctorDirectory doctorlist)
    {
        initComponents();
        this.patientlist = patientlist;
        this.doctorlist = doctorlist;
        this.communitylist = communitylist;
        
        populatePatTable();
        
        btnSave.setEnabled(true);
        btnUpdate.setEnabled(false);
        
        ddhn.setEnabled(false);
        dddn.setEnabled(false);
        txtbp.setEnabled(false);
        txttemp.setEnabled(false);
    }
    
    public manageEncounterjPanel() {
        initComponents();
    }
    
    
    private void populatePatTable() {

        DefaultTableModel model = (DefaultTableModel) patTable.getModel();
        
        model.setRowCount(0);
        
        for (Patient pat : patientlist.getPatientlist()){

            Object[] row =  new Object[7];
            row[0] = pat.getPatientID(); 
            row[1] = pat.getPersonName();
            row[2] = pat.getPersonAge();
            row[3] = pat.getPersonGender();
            row[4] = pat.getHouseAddress();
            row[5] = pat.getCommunity();
            row[6] = pat.getCity();

            model.addRow(row); // adds row to model

        }
    }
    
    private void populateEncTable(Patient pat) {

        DefaultTableModel model = (DefaultTableModel) eTable.getModel();
        
        model.setRowCount(0);
        
        if(pat.getEncounterlist().size() > 0){
            for (Encounter patenc : pat.getEncounterlist()){

             Object[] row =  new Object[5];
             row[0] = patenc.getEncounter_time(); 
             row[1] = patenc.getHospital_name();
             row[2] = patenc.getDoctor_name();
             row[3] = patenc.getBloodPressure();
             row[4] = patenc.getTemperature();

             model.addRow(row); // adds row to model

            } 
        }
        else{
            JOptionPane.showMessageDialog(this, "No Past Encounters for selected Patient");
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        lbl5 = new javax.swing.JLabel();
        lblval5 = new javax.swing.JLabel();
        lbl6 = new javax.swing.JLabel();
        lblval6 = new javax.swing.JLabel();
        lbl7 = new javax.swing.JLabel();
        txtbp = new javax.swing.JTextField();
        lblbp = new javax.swing.JLabel();
        lbl8 = new javax.swing.JLabel();
        txttemp = new javax.swing.JTextField();
        lbltemp = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        ddhn = new javax.swing.JComboBox<>();
        dddn = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        patTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        eTable = new javax.swing.JTable();
        txtSearchID = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        txtSearchName = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        addEnc = new javax.swing.JButton();
        viewEnc = new javax.swing.JButton();
        editEnc = new javax.swing.JButton();
        deleteEnc = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Manage Patient Encounters");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 15, 1062, -1));

        lbl5.setText("Hospital Name:");
        add(lbl5, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 450, -1, 30));

        lblval5.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        lblval5.setForeground(new java.awt.Color(255, 51, 51));
        lblval5.setText(" ");
        add(lblval5, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 450, 438, 30));

        lbl6.setText("Doctor Name:");
        add(lbl6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 490, 110, 30));

        lblval6.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        lblval6.setForeground(new java.awt.Color(255, 51, 51));
        lblval6.setText(" ");
        add(lblval6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 480, 438, 30));

        lbl7.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lbl7.setText("pulse");
        add(lbl7, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 530, 115, 30));

        txtbp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbpActionPerformed(evt);
            }
        });
        txtbp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtbpKeyReleased(evt);
            }
        });
        add(txtbp, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 530, 238, -1));

        lblbp.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        lblbp.setForeground(new java.awt.Color(255, 51, 51));
        lblbp.setText(" ");
        add(lblbp, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 530, 438, 30));

        lbl8.setText("Temperature:");
        add(lbl8, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 570, 110, 30));

        txttemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttempActionPerformed(evt);
            }
        });
        txttemp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txttempKeyReleased(evt);
            }
        });
        add(txttemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 570, 238, -1));

        lbltemp.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        lbltemp.setForeground(new java.awt.Color(255, 51, 51));
        lbltemp.setText(" ");
        add(lbltemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 570, 438, 30));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 620, 110, -1));

        ddhn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddhnActionPerformed(evt);
            }
        });
        add(ddhn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 450, 240, -1));

        dddn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dddnActionPerformed(evt);
            }
        });
        add(dddn, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 490, 240, -1));

        patTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Name", "Age", "Gender", "HouseAddress", "Community", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(patTable);

        jScrollPane1.setViewportView(jScrollPane3);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 880, 140));

        eTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Encounter Time", "Hospital Name", "Doctor Name", "pulse", "Temperature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(eTable);

        jScrollPane4.setViewportView(jScrollPane2);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 880, 140));

        txtSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchIDActionPerformed(evt);
            }
        });
        txtSearchID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchIDKeyReleased(evt);
            }
        });
        add(txtSearchID, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 180, -1));

        jTextField1.setText("Search by Patient ID");
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, -1, -1));

        txtSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchNameActionPerformed(evt);
            }
        });
        txtSearchName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchNameKeyReleased(evt);
            }
        });
        add(txtSearchName, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 70, 200, -1));

        jTextField2.setText("Search by Patient Attributes");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 70, -1, -1));

        addEnc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        addEnc.setText("Add Encounter");
        addEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEncActionPerformed(evt);
            }
        });
        add(addEnc, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 160, 140, -1));

        viewEnc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        viewEnc.setText("View Encounters");
        viewEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEncActionPerformed(evt);
            }
        });
        add(viewEnc, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 220, 140, -1));

        editEnc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        editEnc.setText("Edit Encounters");
        editEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEncActionPerformed(evt);
            }
        });
        add(editEnc, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 330, 140, -1));

        deleteEnc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        deleteEnc.setText("Delete Encounter");
        deleteEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEncActionPerformed(evt);
            }
        });
        add(deleteEnc, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 390, 140, -1));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 620, 110, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void populatehospitals(Community c) {
        
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        for(Hospital com: c.getHospitallist()) {
            model.addElement(com.getHospitalName());
        }

        ddhn.setModel(model);
        

    }
//    
//    public void populateDoctors(String hosname) {
//        
//        DefaultComboBoxModel model = new DefaultComboBoxModel();
//        
//        for(Doctor doc: doctorlist.getDoctorlist()){
//            if(doc.getHospitalname() == hosname){
//                model.addElement(doc.getDoctorName());
//            }
//        }
//        dddn.setModel(model);
//    }
    
    private void txtbpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbpActionPerformed

    private void txtbpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtbpKeyReleased
        // TODO add your handling code here:
        
        String PatterN = "^[0-9 +()-]{1,10}";
        Pattern pattern = Pattern.compile(PatterN);
        Matcher patternmatch = pattern.matcher(txtbp.getText());
        if(!patternmatch.matches() || Integer.parseInt(txtbp.getText()) > 120)
        {
            lblbp.setText("please use integers.");
//            JOptionPane.showMessageDialog(this, "Please Enter Valid Age!");
            txtbp.setText("");

        }
        else
        {
            lblbp.setText("");
        }
    }//GEN-LAST:event_txtbpKeyReleased

    private void txttempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttempActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttempActionPerformed

    private void txttempKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txttempKeyReleased
        // TODO add your handling code here:
        
        
        String PatterN = "^[0-9 +()-]{1,10}";
        Pattern pattern = Pattern.compile(PatterN);
        Matcher patternmatch = pattern.matcher(txttemp.getText());
        if(!patternmatch.matches() || Integer.parseInt(txttemp.getText()) > 120)
        {
            lbltemp.setText("please use integers.");
//            JOptionPane.showMessageDialog(this, "Please Enter Valid Age!");
            txttemp.setText("");

        }
        else
        {
            lbltemp.setText("");
        }
    }//GEN-LAST:event_txttempKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = patTable.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a patient to Add Encotuner");
//            return;
        }
        else{     
        
            DefaultTableModel model = (DefaultTableModel)patTable.getModel();
            selectedPat= patientlist.getPatientlist().get(selectedRowIndex);

            if(ddhn.getSelectedIndex() != -1 && dddn.getSelectedIndex() != -1 && lblbp.getText() == "" && lbltemp.getText() == ""){
                Encounter patEnc = selectedPat.addNewEncounter();

                patEnc.setHospital_name(ddhn.getSelectedItem().toString());
                patEnc.setDoctor_name(dddn.getSelectedItem().toString());
                patEnc.setBloodPressure(Double.parseDouble(txtbp.getText()));
                patEnc.setEncounter_time(LocalDateTime.now());
                patEnc.setTemperature(Double.parseDouble(txttemp.getText()));
                JOptionPane.showMessageDialog(this, "Vital Signs Saved Successfully");
                
                populateEncTable(selectedPat);
                
                btnSave.setEnabled(false);
                btnUpdate.setEnabled(false);

                ddhn.setEnabled(false);
                dddn.setEnabled(false);
                txtbp.setEnabled(false);
                txttemp.setEnabled(false);
            }
            else{
                JOptionPane.showMessageDialog(this, "Provide all the information.");
            }
        }
        
        
        
        
//        Encounter encounter = encounterhistory.AddNewEncounter();
//        
//        if(lblval8.getText().equals(" ") && lblval7.getText().equals(" ") && lblval6.getText().equals(" ") && lblval5.getText().equals(" "))
//        {   
//                  
//            encounter.setPatientID(patient.getPatientID());
//            encounter.setPatient_name(patient.getPersonName());
////            encounter.setCity(patient.getCityName());
////            encounter.setCommunity(patient.getCommunityName());
//            encounter.setHospital_id(Integer.parseInt(txt5.getText()));
//            encounter.setEncounter_time(LocalDateTime.now());
//            encounter.setDoctor_id(Integer.parseInt(txt6.getText()));
//            encounter.setBloodPressure(Double.parseDouble(txtbp.getText()));
//            encounter.setTemperature(Double.parseDouble(txttemp.getText()));
//
//            PopulateTable1();
//        }
//        else
//        {
//            JOptionPane.showMessageDialog(null, "Enter Correct Data and try again");
//            return;
//        }
//
//        txt5.setText("");
//        txt6.setText("");
//        txtbp.setText("");
//        txttemp.setText("");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void ddhnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddhnActionPerformed
        // TODO add your handling code here:
        String hosTxt = ddhn.getSelectedItem().toString();
        populateDoc(hosTxt);
        
    }//GEN-LAST:event_ddhnActionPerformed

    public void populateDoc(String hosname) {
        
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for(Doctor doc: doctorlist.getDoctorlist()) {
            if(doc.getHospitalname().equals(hosname)){
                model.addElement(doc.getDoctorName());
            }
        }
        dddn.setModel(model);
    }
    
    
    private void txtSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchIDActionPerformed

    private void txtSearchIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchIDKeyReleased
        // TODO add your handling code here:

        if(!(txtSearchID.getText().isEmpty()))
        {
            int search = Integer.parseInt(txtSearchID.getText()); // reads the search text as lower case
            DefaultTableModel model = (DefaultTableModel) patTable.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
            patTable.setRowSorter(tr);
            String regex = String.format("^%s$", search);
            tr.setRowFilter(RowFilter.regexFilter(regex));
        }
        else{
            String search = ""; // reads the search text as lower case
            DefaultTableModel model = (DefaultTableModel) patTable.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
            patTable.setRowSorter(tr);
            //            String regex = String.format("^%s$", search);
            tr.setRowFilter(RowFilter.regexFilter(search));
        }
    }//GEN-LAST:event_txtSearchIDKeyReleased

    private void txtSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchNameActionPerformed

    private void txtSearchNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchNameKeyReleased
        // TODO add your handling code here:

        if(!(txtSearchName.getText().isEmpty()))
        {
            String search = (txtSearchName.getText()); // reads the search text as lower case
            DefaultTableModel model = (DefaultTableModel) patTable.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
            patTable.setRowSorter(tr);
            String regex = String.format("(?i)(^%s$)", search);
            tr.setRowFilter(RowFilter.regexFilter(regex));
        }
        else{
            String search = ""; // reads the search text as lower case
            DefaultTableModel model = (DefaultTableModel) patTable.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
            patTable.setRowSorter(tr);
            //            String regex = String.format("^%s$", search);
            tr.setRowFilter(RowFilter.regexFilter(search));
        }
    }//GEN-LAST:event_txtSearchNameKeyReleased

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void viewEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEncActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = patTable.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a patient to view Encotuners");
//            return;
        }
        else{
//            btn_Save.setEnabled(true);
        
        
            DefaultTableModel model = (DefaultTableModel)patTable.getModel();

            //        Doctor selectedEntry = (Doctor) model.getValueAt(selectedRowIndex, 0);  // to get any value cells from table through row and column

            Patient selectedPat= patientlist.getPatientlist().get(selectedRowIndex);

            if(selectedPat.getEncounterlist().isEmpty()){
                JOptionPane.showMessageDialog(this, "No Past Encounters for selected Patient");
            }
            else{
                populateEncTable(selectedPat);
            }
        
        }
    }//GEN-LAST:event_viewEncActionPerformed

    private void editEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEncActionPerformed
        // TODO add your handling code here:
        
               
        int selectedRowIndexenc = eTable.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndexenc < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a Encounter to edit.");
//            return;
        }
        else{
            ddhn.setEnabled(true);
            dddn.setEnabled(true);
            txtbp.setEnabled(true);
            txttemp.setEnabled(true);
            btnSave.setEnabled(false);
            btnUpdate.setEnabled(true);
            
            selectedEnc= selectedPat.getEncounterlist().get(selectedRowIndexenc);
            Community comm = communitylist.searchCommunity(selectedPat.getCommunity());
            populateHospitals(comm);

            txtbp.setText(String.valueOf(selectedEnc.getBloodPressure()));
            txttemp.setText(String.valueOf(selectedEnc.getTemperature()));
        }
        
        
    }//GEN-LAST:event_editEncActionPerformed

    private void addEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEncActionPerformed
        // TODO add your handling code here:
        
        
        int selectedRowIndex = patTable.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a patient to Add Encotuner");
//            return;
        }
        else{
            ddhn.setEnabled(true);
            dddn.setEnabled(true);
            txtbp.setEnabled(true);
            txttemp.setEnabled(true);
            btnSave.setEnabled(true);
            btnUpdate.setEnabled(false);

            DefaultTableModel model = (DefaultTableModel)patTable.getModel();

            //        Doctor selectedEntry = (Doctor) model.getValueAt(selectedRowIndex, 0);  // to get any value cells from table through row and column

            selectedPat= patientlist.getPatientlist().get(selectedRowIndex);

            Community comm = communitylist.searchCommunity(selectedPat.getCommunity());


            populateHospitals(comm);
        }
        
//        Populate Hospitals on patient community and populate doctors on selected hospital then set the text to encounter list.
        
//        enc.setText
    }//GEN-LAST:event_addEncActionPerformed

    private void dddnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dddnActionPerformed
        // TODO add your handling code here:
        
        String hos = ddhn.getSelectedItem().toString();
        
    }//GEN-LAST:event_dddnActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        if(ddhn.getSelectedIndex() != -1 && dddn.getSelectedIndex() != -1 && lblbp.getText().equals("")  && lbltemp.getText().equals("")){
            selectedEnc.setHospital_name(ddhn.getSelectedItem().toString());
            selectedEnc.setDoctor_name(dddn.getSelectedItem().toString());
            selectedEnc.setBloodPressure(Double.parseDouble(txtbp.getText()));
            selectedEnc.setEncounter_time(LocalDateTime.now());
            selectedEnc.setTemperature(Double.parseDouble(txttemp.getText()));
            
            populateEncTable(selectedPat);
            
            btnSave.setEnabled(false);
            btnUpdate.setEnabled(false);

            ddhn.setEnabled(false);
            dddn.setEnabled(false);
            txtbp.setEnabled(false);
            txttemp.setEnabled(false);
        }
        else{
            JOptionPane.showMessageDialog(this, "Provide all the information.");
        }
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void deleteEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEncActionPerformed
        // TODO add your handling code here:
//       selectedPat.getEncounterlist().remove(selectedRowIndexenc);
        
        int selectedRowIndexenc = eTable.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndexenc < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a Encounter to edit.");
//            return;
        }
        else{
            selectedPat.getEncounterlist().remove(selectedRowIndexenc);
            JOptionPane.showMessageDialog(this, "Encounter Deleted Successfully.");
            populateEncTable(selectedPat);
        }
        
        
        
    }//GEN-LAST:event_deleteEncActionPerformed

    private void patTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = patTable.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a patient to Add Encotuner");
//            return;
        }
        else{
            
            addEnc.setEnabled(true);
            viewEnc.setEnabled(true);
            btnSave.setEnabled(true);
            DefaultTableModel model = (DefaultTableModel)patTable.getModel();

            selectedPat= patientlist.getPatientlist().get(selectedRowIndex);
                
            if(selectedPat.getEncounterlist().isEmpty()){
                JOptionPane.showMessageDialog(this, "No Past Encounters for selected Patient");
            }
            else{
                populateEncTable(selectedPat);
            }
        
        }
        
    }//GEN-LAST:event_patTableMouseClicked
    
    public void populateHospitals(Community comm) {
      
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        for(Hospital hos: comm.getHospitallist()) {
            model.addElement(hos.getHospitalName());
        }
        
        ddhn.setModel(model);

    }
    
    
//    private void PopulateTable() {
//
//        DefaultTableModel model = (DefaultTableModel) eTable.getModel();
//        
//        model.setRowCount(0);
//        
//        for(Encounter encounter : encounterhistory.getEncounterHistory())
//        {
//            Object[] row = new Object[6];
//            row[0] = encounter.getEncounter_id();
//            row[1] = encounter.getEncounter_time();
//            row[2] = encounter.getPatientID();
//            row[3] = encounter.getPatient_name();
//            row[4] = encounter.getBloodPressure();
//            row[5] = encounter.getTemperature();
////            row[6] = encounter.getCommunity();
////            row[7] = encounter.getHouseAddress();
////            row[8] = encounter.getMinimumReading();
////            row[9] = encounter.getBloodPressure();
////            row[10] = encounter.getTemperature();
//            
//            model.addRow(row);
//        }
//    }
    
//     private void PopulateTable1() {
//
//        DefaultTableModel model = (DefaultTableModel) eTable.getModel();
//        
//        model.setRowCount(0);
//        
//        for(Encounter encounter : encounterhistory.getEncounterHistory())
//        {
//            Object[] row = new Object[6];
//            row[0] = encounter.getEncounter_id();
//            row[1] = encounter.getEncounter_time();
//            row[2] = encounter.getPatientID();
//            row[3] = encounter.getPatient_name();
//            row[4] = encounter.getBloodPressure();
//            row[5] = encounter.getTemperature();
////            row[6] = encounter.getCommunity();
////            row[7] = encounter.getHouseAddress();
////            row[8] = encounter.getMinimumReading();
////            row[9] = encounter.getBloodPressure();
////            row[10] = encounter.getTemperature();
//            
//            if(encounter.getPatientID() == Integer.parseInt(txt1.getText()))
//            {
//                model.addRow(row);
//            }
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEnc;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> dddn;
    private javax.swing.JComboBox<String> ddhn;
    private javax.swing.JButton deleteEnc;
    private javax.swing.JTable eTable;
    private javax.swing.JButton editEnc;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lbl5;
    private javax.swing.JLabel lbl6;
    private javax.swing.JLabel lbl7;
    private javax.swing.JLabel lbl8;
    private javax.swing.JLabel lblbp;
    private javax.swing.JLabel lbltemp;
    private javax.swing.JLabel lblval5;
    private javax.swing.JLabel lblval6;
    private javax.swing.JTable patTable;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchName;
    private javax.swing.JTextField txtbp;
    private javax.swing.JTextField txttemp;
    private javax.swing.JButton viewEnc;
    // End of variables declaration//GEN-END:variables
}
