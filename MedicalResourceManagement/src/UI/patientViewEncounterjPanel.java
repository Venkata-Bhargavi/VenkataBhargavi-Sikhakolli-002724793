/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import medicalresourcemanagement.Community;
import medicalresourcemanagement.CommunityDirectory;
import medicalresourcemanagement.Doctor;
import medicalresourcemanagement.DoctorDirectory;
import medicalresourcemanagement.Encounter;
import medicalresourcemanagement.EncounterHistory;
import medicalresourcemanagement.Hospital;
import medicalresourcemanagement.Patient;
import medicalresourcemanagement.PatientDirectory;
import medicalresourcemanagement.Person;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Krishnakanth Naik Jarapala
 */
public class patientViewEncounterjPanel extends javax.swing.JPanel {

    /**
     * Creates new form manageEncounterjPanel
     */
    
    PatientDirectory patientlist;
    DoctorDirectory doctorlist;
    CommunityDirectory communitylist;
    Community patComm;
    
    Patient selectedPat;
    Encounter selectedEnc;
    String username;
   
    
    
    
    public patientViewEncounterjPanel(PatientDirectory patientlist, CommunityDirectory communitylist, DoctorDirectory doctorlist, String username)
    {
        initComponents();
        this.patientlist = patientlist;
        this.doctorlist = doctorlist;
        this.communitylist = communitylist;
        this.username = username;
        
        txtSearchID.setEnabled(false);
        txtSearchName.setEnabled(false);
        
        for(Patient pat: patientlist.getPatientlist()){
            if(pat.getUsername().equals(username)){
//                loggedinPatient = ;
                txtSearchID.setText(String.valueOf(pat.getPatientID()));
            }
        }
        
        
        populatePatTable();
        
//        btnSave.setEnabled(true);
//        btnUpdate.setEnabled(false);
        
//        ddhn.setEnabled(false);
//        dddn.setEnabled(false);
//        txtbp.setEnabled(false);
//        txttemp.setEnabled(false);
    }
    
    public patientViewEncounterjPanel() {
        initComponents();
    }
    
    
    private void populatePatTable() {

        DefaultTableModel model = (DefaultTableModel) patTable.getModel();
        
        model.setRowCount(0);
        
        for (Patient pat : patientlist.getPatientlist()){
                if(pat.getUsername().equals(username)){
                     Object[] row =  new Object[7];
                            row[0] = pat.getPatientID(); 
                            row[1] = pat.getPersonName();
                            row[2] = pat.getPersonAge();
                            row[3] = pat.getPersonGender();
                            row[4] = pat.getHouseAddress();
                            row[5] = pat.getCommunity();
                            row[6] = pat.getCity();

                            model.addRow(row); // adds row to model
                }
           

        }
    }
    
    private void populateEncTable(Patient pat) {

        DefaultTableModel model = (DefaultTableModel) eTable.getModel();
        
        model.setRowCount(0);
        
        if(pat.getEncounterlist().size() > 0){
            for (Encounter patenc : pat.getEncounterlist()){

             Object[] row =  new Object[5];
             row[0] = patenc.getEncounter_time(); 
             row[1] = patenc.getHospital_name();
             row[2] = patenc.getDoctor_name();
             row[3] = patenc.getBloodPressure();
             row[4] = patenc.getTemperature();

             model.addRow(row); // adds row to model

            } 
        }
        else{
            JOptionPane.showMessageDialog(this, "No Past Encounters for selected Patient");
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        lblval5 = new javax.swing.JLabel();
        lblval6 = new javax.swing.JLabel();
        lblbp = new javax.swing.JLabel();
        lbltemp = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        patTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        eTable = new javax.swing.JTable();
        txtSearchID = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        txtSearchName = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        viewEnc = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Manage Patient Encounters");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 15, 1062, -1));

        lblval5.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        lblval5.setForeground(new java.awt.Color(255, 51, 51));
        lblval5.setText(" ");
        add(lblval5, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 450, 438, 30));

        lblval6.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        lblval6.setForeground(new java.awt.Color(255, 51, 51));
        lblval6.setText(" ");
        add(lblval6, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 480, 438, 30));

        lblbp.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        lblbp.setForeground(new java.awt.Color(255, 51, 51));
        lblbp.setText(" ");
        add(lblbp, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 530, 438, 30));

        lbltemp.setFont(new java.awt.Font("Segoe UI Black", 3, 14)); // NOI18N
        lbltemp.setForeground(new java.awt.Color(255, 51, 51));
        lbltemp.setText(" ");
        add(lbltemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 570, 438, 30));

        patTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Name", "Age", "Gender", "HouseAddress", "Community", "City"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(patTable);

        jScrollPane1.setViewportView(jScrollPane3);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 880, 140));

        eTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Encounter Time", "Hospital Name", "Doctor Name", "Blood Pressure", "Temperature"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(eTable);

        jScrollPane4.setViewportView(jScrollPane2);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 880, 140));

        txtSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchIDActionPerformed(evt);
            }
        });
        txtSearchID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchIDKeyReleased(evt);
            }
        });
        add(txtSearchID, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 180, -1));

        jTextField1.setText("Search by Patient ID");
        add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 70, -1, -1));

        txtSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchNameActionPerformed(evt);
            }
        });
        txtSearchName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchNameKeyReleased(evt);
            }
        });
        add(txtSearchName, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 70, 200, -1));

        jTextField2.setText("Search by Patient Attributes");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 70, -1, -1));

        viewEnc.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        viewEnc.setText("View Encounters");
        viewEnc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEncActionPerformed(evt);
            }
        });
        add(viewEnc, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 220, 140, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void populatehospitals(Community c) {
        
        DefaultComboBoxModel model = new DefaultComboBoxModel();

        for(Hospital com: c.getHospitallist()) {
            model.addElement(com.getHospitalName());
        }

//        ddhn.setModel(model);
        

    }
//    
//    public void populateDoctors(String hosname) {
//        
//        DefaultComboBoxModel model = new DefaultComboBoxModel();
//        
//        for(Doctor doc: doctorlist.getDoctorlist()){
//            if(doc.getHospitalname() == hosname){
//                model.addElement(doc.getDoctorName());
//            }
//        }
//        dddn.setModel(model);
//    }
    
    public void populateDoc(String hosname) {
        
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        for(Doctor doc: doctorlist.getDoctorlist()) {
            if(doc.getHospitalname().equals(hosname)){
                model.addElement(doc.getDoctorName());
            }
        }
//        dddn.setModel(model);
    }
    
    
    private void txtSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchIDActionPerformed

    private void txtSearchIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchIDKeyReleased
        // TODO add your handling code here:
        int loggedinPatient = 0;
        for(Patient pat: patientlist.getPatientlist()){
            if(pat.getUsername().equals(username)){
                loggedinPatient = pat.getPatientID();
            }
        }
        
        
        
        
        if(loggedinPatient != 0)
        {
            int search = Integer.parseInt(txtSearchID.getText()); // reads the search text as lower case
            DefaultTableModel model = (DefaultTableModel) patTable.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
            patTable.setRowSorter(tr);
            String regex = String.format("^%s$", search);
            tr.setRowFilter(RowFilter.regexFilter(regex));
        }
        else{
            String search = ""; // reads the search text as lower case
            DefaultTableModel model = (DefaultTableModel) patTable.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
            patTable.setRowSorter(tr);
            //            String regex = String.format("^%s$", search);
            tr.setRowFilter(RowFilter.regexFilter(search));
        }
    }//GEN-LAST:event_txtSearchIDKeyReleased

    private void txtSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchNameActionPerformed

    private void txtSearchNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchNameKeyReleased
        // TODO add your handling code here:

        if(!(txtSearchName.getText().isEmpty()))
        {
            String search = (txtSearchName.getText()); // reads the search text as lower case
            DefaultTableModel model = (DefaultTableModel) patTable.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
            patTable.setRowSorter(tr);
            String regex = String.format("(?i)(^%s$)", search);
            tr.setRowFilter(RowFilter.regexFilter(regex));
        }
        else{
            String search = ""; // reads the search text as lower case
            DefaultTableModel model = (DefaultTableModel) patTable.getModel();
            TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
            patTable.setRowSorter(tr);
            //            String regex = String.format("^%s$", search);
            tr.setRowFilter(RowFilter.regexFilter(search));
        }
    }//GEN-LAST:event_txtSearchNameKeyReleased

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void viewEncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEncActionPerformed
        // TODO add your handling code here:
        
        int selectedRowIndex = patTable.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a patient to view Encotuners");
//            return;
        }
        else{
//            btn_Save.setEnabled(true);
        
        
            DefaultTableModel model = (DefaultTableModel)patTable.getModel();

            //        Doctor selectedEntry = (Doctor) model.getValueAt(selectedRowIndex, 0);  // to get any value cells from table through row and column

            Patient selectedPat= patientlist.getPatientlist().get(selectedRowIndex);

            if(selectedPat.getEncounterlist().isEmpty()){
                JOptionPane.showMessageDialog(this, "No Past Encounters for selected Patient");
            }
            else{
                populateEncTable(selectedPat);
            }
        
        }
    }//GEN-LAST:event_viewEncActionPerformed

    private void patTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patTableMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = patTable.getSelectedRow();  // gives index of selected rows
        if(selectedRowIndex < 0)
        {
            JOptionPane.showMessageDialog(this, "Select a patient to Add Encotuner");
//            return;
        }
        else{
            
//            addEnc.setEnabled(true);
//            viewEnc.setEnabled(true);
//            btnSave.setEnabled(true);
            DefaultTableModel model = (DefaultTableModel)patTable.getModel();

            selectedPat= patientlist.getPatientlist().get(selectedRowIndex);
                
            if(selectedPat.getEncounterlist().isEmpty()){
                JOptionPane.showMessageDialog(this, "No Past Encounters for selected Patient");
            }
            else{
                populateEncTable(selectedPat);
            }
        
        }
        
    }//GEN-LAST:event_patTableMouseClicked
    
    public void populateHospitals(Community comm) {
      
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        
        for(Hospital hos: comm.getHospitallist()) {
            model.addElement(hos.getHospitalName());
        }
        
//        ddhn.setModel(model);

    }
    
    
//    private void PopulateTable() {
//
//        DefaultTableModel model = (DefaultTableModel) eTable.getModel();
//        
//        model.setRowCount(0);
//        
//        for(Encounter encounter : encounterhistory.getEncounterHistory())
//        {
//            Object[] row = new Object[6];
//            row[0] = encounter.getEncounter_id();
//            row[1] = encounter.getEncounter_time();
//            row[2] = encounter.getPatientID();
//            row[3] = encounter.getPatient_name();
//            row[4] = encounter.getBloodPressure();
//            row[5] = encounter.getTemperature();
////            row[6] = encounter.getCommunity();
////            row[7] = encounter.getHouseAddress();
////            row[8] = encounter.getMinimumReading();
////            row[9] = encounter.getBloodPressure();
////            row[10] = encounter.getTemperature();
//            
//            model.addRow(row);
//        }
//    }
    
//     private void PopulateTable1() {
//
//        DefaultTableModel model = (DefaultTableModel) eTable.getModel();
//        
//        model.setRowCount(0);
//        
//        for(Encounter encounter : encounterhistory.getEncounterHistory())
//        {
//            Object[] row = new Object[6];
//            row[0] = encounter.getEncounter_id();
//            row[1] = encounter.getEncounter_time();
//            row[2] = encounter.getPatientID();
//            row[3] = encounter.getPatient_name();
//            row[4] = encounter.getBloodPressure();
//            row[5] = encounter.getTemperature();
////            row[6] = encounter.getCommunity();
////            row[7] = encounter.getHouseAddress();
////            row[8] = encounter.getMinimumReading();
////            row[9] = encounter.getBloodPressure();
////            row[10] = encounter.getTemperature();
//            
//            if(encounter.getPatientID() == Integer.parseInt(txt1.getText()))
//            {
//                model.addRow(row);
//            }
//        }
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable eTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lblbp;
    private javax.swing.JLabel lbltemp;
    private javax.swing.JLabel lblval5;
    private javax.swing.JLabel lblval6;
    private javax.swing.JTable patTable;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchName;
    private javax.swing.JButton viewEnc;
    // End of variables declaration//GEN-END:variables
}
